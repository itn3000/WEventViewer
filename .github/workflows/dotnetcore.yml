name: .NET Core Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: "windows-latest"
            rid: "win-x64"
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core 8.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: "8.0.300"
    - name: archiving dotnet tool
      run: "powershell ./build.ps1 --target Archive --configuration Release --runtime \"${{matrix.rid}}\""
    - name: upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: "WEventViewer-win-x64"
        path: "dist/publish/Release/${{matrix.rid}}/WEventViewer-${{matrix.rid}}.zip"
  release:
    runs-on: "windows-latest"
    needs: ["build"]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v1
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            8.0.100
      - name: restore dotnet tools
        run: dotnet tool restore
      - name: downloading nuget package
        uses: actions/download-artifact@v1
        with:
          name: "nupkg-win-x64"
          path: nupkg
      - name: downloading win-x64 binary
        uses: actions/download-artifact@v1
        with:
          name: "bin-win-x64"
          path: win-x64
      - name: downloading osx-x64 binary
        uses: actions/download-artifact@v1
        with:
          name: "bin-osx-x64"
          path: osx-x64
      - name: downloading linux-x64 binary
        uses: actions/download-artifact@v1
        with:
          name: "bin-linux-x64"
          path: linux-x64
      - name: create github release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{github.ref}}
          draft: true
          prerelease: false
          release_name: "Release ${{github.ref}}"
      - name: extract tag name
        uses: frabert/replace-string-action@v1
        with:
          pattern: "refs/tags/"
          string: ${{github.ref}}
          replace-with: ""
        id: extract_tag_name
      - name: publish nupkg as github release assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: nupkg/dotnet-compressor.${{ steps.extract_tag_name.outputs.replaced }}.nupkg
          asset_name: dotnet-compressor.${{ steps.extract_tag_name.outputs.replaced }}.nupkg
          asset_content_type: application/zip
      - name: publish snupkg as github release assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: nupkg/dotnet-compressor.${{ steps.extract_tag_name.outputs.replaced }}.snupkg
          asset_name: dotnet-compressor.${{ steps.extract_tag_name.outputs.replaced }}.snupkg
          asset_content_type: application/zip
      - name: publish macos binary as github release assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: osx-x64/dcomp
          asset_name: dcomp-osx-x64
          asset_content_type: application/octet-binary
      - name: publish linux binary as github release assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: linux-x64/dcomp
          asset_name: dcomp-linux-x64
          asset_content_type: application/octet-binary
      - name: publish windows binary as github release assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: win-x64/dcomp.exe
          asset_name: dcomp-win-x64.exe
          asset_content_type: application/octet-binary
      - name: publish windows binary pdb as github release assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: win-x64/dcomp.pdb
          asset_name: dcomp-win-x64.pdb
          asset_content_type: application/octet-binary
      - name: upload nupkg to nugetorg
        run: "dotnet nuget push -k \"${{secrets.NUGET_API_KEY}}\" -s https://api.nuget.org/v3/index.json nupkg/dotnet-compressor.${{ steps.extract_tag_name.outputs.replaced }}.nupkg"